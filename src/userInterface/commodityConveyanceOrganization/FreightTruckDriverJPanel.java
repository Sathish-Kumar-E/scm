/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userInterface.commodityConveyanceOrganization;

/**
 *
 * @author sathi
 */

import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;

import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;

import userInterface.Business;
import business.organization.procurement.*;
import business.organization.production.*;
import javax.swing.JOptionPane;
import userInterface.LoginJPanel;

public class FreightTruckDriverJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FreightTruckDriverJPanel
     */
    
    private JPanel userProcessContainer;
    private Business business;
    private String username;
    private ProductionAvailableRawMaterials productionAvailableRawMaterials;
    
    private ProcurementOrderDirectory procurementOrderDirectory;
    
    public FreightTruckDriverJPanel(JPanel userProcessContainer, Business business, String username) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.username = username;
        this.business = business;
        this.procurementOrderDirectory = this.business.getProcurementOrganization().getProcurementOrderDirectory();
        this.productionAvailableRawMaterials = this.business.getProductionOrganization().getProductionAvailableRawMaterials();
    }
    
    public void populateTransportationOrder() {
        DefaultTableModel model = (DefaultTableModel) tblTransportationOrder.getModel();
        model.setRowCount(0);
        for(ProcurementOrder procurementOrder : this.procurementOrderDirectory.getProcurementOrderList()) {
            if(procurementOrder.getStatus().equals("Packing Completed")) {
                int procurementOrderId = procurementOrder.getProcurementOrderId();
                String from = "Procurement Organization";
                String to = "Production Organization";
                int totalItems = 0;
                Map<String, Integer> orderItems = procurementOrder.getProcurementOrder();
                for (Integer quantity : orderItems.values()) {
                    totalItems += quantity;
                }
                Object[] row = new Object[]{Integer.valueOf(procurementOrderId), from, to, Integer.valueOf(totalItems)};
                model.addRow(row);  
            }
        }
        txtTransportationOrderDetails.setText("");
    }
    
    public void populateTransporationOrderAssignedToMe() {
        DefaultTableModel model = (DefaultTableModel) tblTransportationOrderAssignedToMe.getModel();
        model.setRowCount(0);
        for(ProcurementOrder procurementOrder : this.procurementOrderDirectory.getProcurementOrderList()) {
            if((procurementOrder.getStatus().equals("Transportation Assigned") || procurementOrder.getStatus().equals("Delivery Picked")) && procurementOrder.getProcurementDeliveryAssignedTo().equals(this.username)) {
                int procurementOrderId = procurementOrder.getProcurementOrderId();
                String from = "Procurement Organization";
                String to = "Production Organization";
                int totalItems = 0;
                Map<String, Integer> orderItems = procurementOrder.getProcurementOrder();
                for (Integer quantity : orderItems.values()) {
                    totalItems += quantity;
                }
                Object[] row = new Object[]{Integer.valueOf(procurementOrderId), from, to, Integer.valueOf(totalItems)};
                model.addRow(row);  
            }
        }
        txtTransporationOrderDetailsAssignedToMe.setText("");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransportationOrder = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTransportationOrderAssignedToMe = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtTransportationOrderDetails = new javax.swing.JTextArea();
        btnAssignToMyQueue = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtTransporationOrderDetailsAssignedToMe = new javax.swing.JTextArea();
        btnRemoveFromMyQueue = new javax.swing.JButton();
        btnDeliveryPicked = new javax.swing.JButton();
        btnDeliveryCompleted = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("COMMODITY CONVEYANCE ORGANIZATION");

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLogout.setText("LOGOUT");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("TRANSPORATION ORDERS");

        tblTransportationOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Procurement Order ID", "From", "To", "Items"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTransportationOrder);

        tblTransportationOrderAssignedToMe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Procurement Order ID", "From", "To", "Items"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblTransportationOrderAssignedToMe);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("TRANSPORTATION ORDERS (ASSIGNED TO ME)");

        txtTransportationOrderDetails.setColumns(20);
        txtTransportationOrderDetails.setRows(5);
        jScrollPane3.setViewportView(txtTransportationOrderDetails);

        btnAssignToMyQueue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAssignToMyQueue.setText("ASSIGN TO MY QUEUE");
        btnAssignToMyQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToMyQueueActionPerformed(evt);
            }
        });

        txtTransporationOrderDetailsAssignedToMe.setColumns(20);
        txtTransporationOrderDetailsAssignedToMe.setRows(5);
        jScrollPane4.setViewportView(txtTransporationOrderDetailsAssignedToMe);

        btnRemoveFromMyQueue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRemoveFromMyQueue.setText("REMOVE FROM MY QUEUE");
        btnRemoveFromMyQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFromMyQueueActionPerformed(evt);
            }
        });

        btnDeliveryPicked.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeliveryPicked.setText("DELIVERY PICKED");
        btnDeliveryPicked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveryPickedActionPerformed(evt);
            }
        });

        btnDeliveryCompleted.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeliveryCompleted.setText("DELIVERY COMPLETED");
        btnDeliveryCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveryCompletedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAssignToMyQueue, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnDeliveryPicked, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnRemoveFromMyQueue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDeliveryCompleted, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(225, 225, 225)))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack)
                    .addComponent(btnLogout))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnAssignToMyQueue)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                        .addComponent(jScrollPane4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemoveFromMyQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeliveryPicked)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeliveryCompleted)))
                .addContainerGap(94, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, jLabel3});

    }// </editor-fold>//GEN-END:initComponents
    
    private void btnAssignToMyQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToMyQueueActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblTransportationOrder.getSelectedRow();
        if (selectedRow >= 0) {
            int procurementOrderId = (Integer) tblTransportationOrder.getValueAt(selectedRow, 0);
            ProcurementOrder selectedOrder = null;
            for (ProcurementOrder order : this.procurementOrderDirectory.getProcurementOrderList()) {
                if (order.getProcurementOrderId() == procurementOrderId) {
                    selectedOrder = order;
                    break;
                }
            }
            if (selectedOrder != null) {
                selectedOrder.setStatus("Transportation Assigned");
                selectedOrder.setProcurementDeliveryAssignedTo(this.username);
                populateTransportationOrder();
                populateTransporationOrderAssignedToMe();
                JOptionPane.showMessageDialog(null, "Transportation for procurement order id = " + selectedOrder.getProcurementOrderId() + " has been assigned to you");
            } else {
                JOptionPane.showMessageDialog(null, "Error: Order not found.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select a transporation order for assigning it to your queue");
        }
    }//GEN-LAST:event_btnAssignToMyQueueActionPerformed
    
    private void btnRemoveFromMyQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFromMyQueueActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblTransportationOrderAssignedToMe.getSelectedRow();
        if (selectedRow >= 0) {
            int procurementOrderId = (Integer) tblTransportationOrderAssignedToMe.getValueAt(selectedRow, 0);
            ProcurementOrder selectedOrder = null;
            for (ProcurementOrder order : this.procurementOrderDirectory.getProcurementOrderList()) {
                if (order.getProcurementOrderId() == procurementOrderId) {
                    selectedOrder = order;
                    break;
                }
            }
            if (selectedOrder != null) {
                selectedOrder.setStatus("Packing Completed");
                selectedOrder.setProcurementDeliveryAssignedTo("");
                populateTransportationOrder();
                populateTransporationOrderAssignedToMe();
                JOptionPane.showMessageDialog(null, "Transportation Order with procurement id = " + selectedOrder.getProcurementOrderId() + " has been removed from your queue");
            } else {
                JOptionPane.showMessageDialog(null, "Error: Order not found.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select a transportation order to remove from your queue");
        }
    }//GEN-LAST:event_btnRemoveFromMyQueueActionPerformed
    
    private void btnDeliveryPickedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveryPickedActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblTransportationOrderAssignedToMe.getSelectedRow();
        if (selectedRow >= 0) {
            int procurementOrderId = (Integer) tblTransportationOrderAssignedToMe.getValueAt(selectedRow, 0);
            ProcurementOrder selectedOrder = null;
            for (ProcurementOrder order : this.procurementOrderDirectory.getProcurementOrderList()) {
                if (order.getProcurementOrderId() == procurementOrderId) {
                    selectedOrder = order;
                    break;
                }
            }
            if (selectedOrder != null && selectedOrder.getStatus().equals("Transportation Assigned") 
                && selectedOrder.getProcurementDeliveryAssignedTo().equals(this.username)) {
                selectedOrder.setStatus("Delivery Picked");
                populateTransportationOrder();
                populateTransporationOrderAssignedToMe();
                JOptionPane.showMessageDialog(null, "Delivery status updated to 'Picked' for order id = " + selectedOrder.getProcurementOrderId());
            } else {
                JOptionPane.showMessageDialog(null, "Error: Either the order is not found, or it is not in the correct state for this action.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select an order to update its delivery status.");
        }     
    }//GEN-LAST:event_btnDeliveryPickedActionPerformed
    
    private void btnDeliveryCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveryCompletedActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblTransportationOrderAssignedToMe.getSelectedRow();
        if (selectedRow >= 0) {
            int procurementOrderId = (Integer) tblTransportationOrderAssignedToMe.getValueAt(selectedRow, 0);
            ProcurementOrder selectedOrder = null;
            for (ProcurementOrder order : this.procurementOrderDirectory.getProcurementOrderList()) {
                if (order.getProcurementOrderId() == procurementOrderId) {
                    selectedOrder = order;
                    break;
                }
            }
            if (selectedOrder != null && selectedOrder.getStatus().equals("Delivery Picked") 
                    && selectedOrder.getProcurementDeliveryAssignedTo().equals(this.username)) {
                selectedOrder.setStatus("Delivery Completed");
                this.productionAvailableRawMaterials.procurementOrderDelivered(selectedOrder);
                populateTransportationOrder();
                populateTransporationOrderAssignedToMe();
                JOptionPane.showMessageDialog(null, "Delivery status updated to 'Completed' for order id = " + selectedOrder.getProcurementOrderId());
            } else {
                JOptionPane.showMessageDialog(null, "Error: Either the order is not found, or it is not in the correct state for this action.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select an order to update its delivery status.");
        }     
    }//GEN-LAST:event_btnDeliveryCompletedActionPerformed
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.business.getProcurementOrganization().setProcurementOrderDirectory(this.procurementOrderDirectory);
        LoginJPanel panel = new LoginJPanel(userProcessContainer, this.business);
        userProcessContainer.add("LoginJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed
    
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        this.business.getProcurementOrganization().setProcurementOrderDirectory(this.procurementOrderDirectory);
        LoginJPanel panel = new LoginJPanel(userProcessContainer, this.business);
        userProcessContainer.add("LoginJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnLogoutActionPerformed
       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignToMyQueue;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeliveryCompleted;
    private javax.swing.JButton btnDeliveryPicked;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRemoveFromMyQueue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tblTransportationOrder;
    private javax.swing.JTable tblTransportationOrderAssignedToMe;
    private javax.swing.JTextArea txtTransporationOrderDetailsAssignedToMe;
    private javax.swing.JTextArea txtTransportationOrderDetails;
    // End of variables declaration//GEN-END:variables
}
