/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userInterface.onlineShoppingStore;

/**
 *
 * @author sathi
 */

import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;

import userInterface.Business;
import business.organization.procurement.*;
import business.organization.production.*;
import business.organization.onlineShoppingStore.InStockProducts;
import business.organization.onlineShoppingStore.CustomerOrderDirectory;
import business.organization.onlineShoppingStore.CustomerOrder;
import business.organization.onlineShoppingStore.CustomerProductPrice;
import business.organization.onlineShoppingStore.CustomerProductPriceDirectory;
import javax.swing.JOptionPane;
import userInterface.LoginJPanel;

public class CustomerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerJPanel
     */
    
    private JPanel userProcessContainer;
    private Business business;
    private String username;
    private InStockProducts inStockProducts;
    private CustomerOrderDirectory customerOrderDirectory;
    private CustomerProductPriceDirectory customerProductPriceDirectory;
    
    public CustomerJPanel(JPanel userProcessContainer, Business business, String username) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.username = username;
        this.business = business;
        this.inStockProducts = this.business.getOnlineShoppingStoreOrganization().getInStockProducts();
        this.customerOrderDirectory = this.business.getOnlineShoppingStoreOrganization().getCustomerOrderDirectory();
        this.customerProductPriceDirectory = this.business.getOnlineShoppingStoreOrganization().getCustomerProductPriceDirectory();
        populateInStockTable();
        setupOrderStatusComboBox();    
        comboBoxCustomerOrderStatus.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                populateCustomerOrderTable();
            }
        });
    }
    
    private void setupOrderStatusComboBox() {
        String[] orderStatuses = {"Order Placed", "Delivery Completed"};
        comboBoxCustomerOrderStatus.setModel(new DefaultComboBoxModel<>(orderStatuses));
    }
    
    public void populateInStockTable() {
        DefaultTableModel model = (DefaultTableModel) tblInStockProducts.getModel();
        model.setRowCount(0);
        for (Map.Entry<String, Integer> entry : inStockProducts.getInStockProducts().entrySet()) {
            String productName = entry.getKey();
            int availableUnits = entry.getValue();
            int pricePerUnit = customerProductPriceDirectory.getCustomerProductPriceList().stream()
                .filter(cpp -> cpp.getName().equals(productName))
                .findFirst()
                .map(CustomerProductPrice::getPrice)
                .orElse(0);
            model.addRow(new Object[]{productName, availableUnits, pricePerUnit});
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInStockProducts = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSpinnerPotatoChipsCount = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jSpinnerOrangeJuiceCount = new javax.swing.JSpinner();
        jSpinnerMangoJuiceCount = new javax.swing.JSpinner();
        jSpinnerWaterBottlesCount = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnPlaceTheOrder = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCustomerOrder = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        comboBoxCustomerOrderStatus = new javax.swing.JComboBox<>();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ONLINE SHOPPING WEBSITE");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 350, 40));

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 100, -1));

        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLogout.setText("LOGOUT");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 20, 110, -1));

        tblInStockProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Product Name", "Available Units", "Price Per Unit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblInStockProducts);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 540, 160));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("AVAILABLE PRODUCTS AT OUR STORE");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 540, 40));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("SELECT THE ITEMS OF YOUR CHOICE AND PLACE THE ORDER");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 540, 40));

        jLabel4.setText("Orange Juice");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 380, 140, 30));
        add(jSpinnerPotatoChipsCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 380, 80, 30));

        jLabel5.setText("Potato Chips");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 130, 30));
        add(jSpinnerOrangeJuiceCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 380, 80, 30));
        add(jSpinnerMangoJuiceCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 430, 80, 30));
        add(jSpinnerWaterBottlesCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 430, 80, 30));

        jLabel6.setText("Water Bottles");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 430, 160, 30));

        jLabel7.setText("Mango Juice");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, 140, 30));

        btnPlaceTheOrder.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnPlaceTheOrder.setText("PLACE THE ORDER");
        btnPlaceTheOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceTheOrderActionPerformed(evt);
            }
        });
        add(btnPlaceTheOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 490, 250, -1));

        tblCustomerOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Items", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblCustomerOrder);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 127, 470, 210));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("YOUR ORDER");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 90, 230, 20));

        comboBoxCustomerOrderStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxCustomerOrderStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCustomerOrderStatusActionPerformed(evt);
            }
        });
        add(comboBoxCustomerOrderStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(862, 90, 240, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.business.getOnlineShoppingStoreOrganization().setInStockProducts(this.inStockProducts);
        this.business.getOnlineShoppingStoreOrganization().setCustomerOrderDirectory(this.customerOrderDirectory);
        this.business.getOnlineShoppingStoreOrganization().setCustomerProductPriceDirectory(this.customerProductPriceDirectory);
        LoginJPanel panel = new LoginJPanel(userProcessContainer, this.business);
        userProcessContainer.add("LoginJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed
    
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        this.business.getOnlineShoppingStoreOrganization().setInStockProducts(this.inStockProducts);
        this.business.getOnlineShoppingStoreOrganization().setCustomerOrderDirectory(this.customerOrderDirectory);
        this.business.getOnlineShoppingStoreOrganization().setCustomerProductPriceDirectory(this.customerProductPriceDirectory);
        LoginJPanel panel = new LoginJPanel(userProcessContainer, this.business);
        userProcessContainer.add("LoginJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnPlaceTheOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceTheOrderActionPerformed
        // TODO add your handling code here:
        int potatoChipsCount = (Integer) jSpinnerPotatoChipsCount.getValue();
        int orangeJuiceCount = (Integer) jSpinnerOrangeJuiceCount.getValue();
        int mangoJuiceCount = (Integer) jSpinnerMangoJuiceCount.getValue();
        int waterBottlesCount = (Integer) jSpinnerWaterBottlesCount.getValue();
        HashMap<String, Integer> orderItems = new HashMap<>();
        if (potatoChipsCount > 0) {
            orderItems.put("Potato Chips", potatoChipsCount);
        }
        if (orangeJuiceCount > 0) {
            orderItems.put("Orange Juice", orangeJuiceCount);
        }
        if (mangoJuiceCount > 0) {
            orderItems.put("Mango Juice", mangoJuiceCount);
        }
        if (waterBottlesCount > 0) {
            orderItems.put("Water Bottles", waterBottlesCount);
        }
        if (areItemsAvailable(orderItems)) {
            int newOrderId = customerOrderDirectory.getCustomerOrderList().size() + 1;
            CustomerOrder newOrder = new CustomerOrder(newOrderId, orderItems, calculateOrderPrice(orderItems), "Order Placed", "Not Assigned", this.username);
            customerOrderDirectory.addCustomerOrder(newOrder);
            updateInStockProducts(orderItems);
            populateCustomerOrderTable();
            JOptionPane.showMessageDialog(null, "Order placed successfully!");
        } else {
            JOptionPane.showMessageDialog(null, "One or more items are not available in the requested quantity.");
        }
        populateInStockTable();
    }//GEN-LAST:event_btnPlaceTheOrderActionPerformed

    private void comboBoxCustomerOrderStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCustomerOrderStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxCustomerOrderStatusActionPerformed
    
    private boolean areItemsAvailable(HashMap<String, Integer> orderItems) {
        for (Map.Entry<String, Integer> item : orderItems.entrySet()) {
            String productName = item.getKey();
            int requestedQuantity = item.getValue();
            if (!inStockProducts.getInStockProducts().containsKey(productName) || inStockProducts.getInStockProducts().get(productName) < requestedQuantity) {
                return false;
            }
        }
        return true;
    }

    private void updateInStockProducts(HashMap<String, Integer> orderItems) {
        for (Map.Entry<String, Integer> item : orderItems.entrySet()) {
            String productName = item.getKey();
            int orderedQuantity = item.getValue();
            int currentStock = inStockProducts.getInStockProducts().get(productName);
            inStockProducts.getInStockProducts().put(productName, currentStock - orderedQuantity);
        }
    }

    private int calculateOrderPrice(HashMap<String, Integer> orderItems) {
        int totalPrice = 0;
        for (Map.Entry<String, Integer> item : orderItems.entrySet()) {
            String productName = item.getKey();
            int quantity = item.getValue();
            int pricePerUnit = customerProductPriceDirectory.getCustomerProductPriceList().stream()
                .filter(cpp -> cpp.getName().equals(productName))
                .findFirst()
                .orElse(new CustomerProductPrice(productName, 0))
                .getPrice();
            totalPrice += pricePerUnit * quantity;
        }
        return totalPrice;
    }
    
    private void populateCustomerOrderTable() {
        String selectedStatus = (String) comboBoxCustomerOrderStatus.getSelectedItem();
        DefaultTableModel model = (DefaultTableModel) tblCustomerOrder.getModel();
        model.setRowCount(0);
        for (CustomerOrder order : customerOrderDirectory.getCustomerOrderList()) {
            if (order.getUsername().equals(this.username) && order.getStatus().equals(selectedStatus)) {
                int orderId = order.getId();
                int itemsCount = calculateTotalItems(order.getItems());
                String status = order.getStatus();
                Object[] row = new Object[]{orderId, itemsCount, status};
                model.addRow(row);
            }
        }
    }
    
    private int calculateTotalItems(HashMap<String, Integer> items) {
        int total = 0;
        for (Integer count : items.values()) {
            total += count;
        }
        return total;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnPlaceTheOrder;
    private javax.swing.JComboBox<String> comboBoxCustomerOrderStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinnerMangoJuiceCount;
    private javax.swing.JSpinner jSpinnerOrangeJuiceCount;
    private javax.swing.JSpinner jSpinnerPotatoChipsCount;
    private javax.swing.JSpinner jSpinnerWaterBottlesCount;
    private javax.swing.JTable tblCustomerOrder;
    private javax.swing.JTable tblInStockProducts;
    // End of variables declaration//GEN-END:variables
}
