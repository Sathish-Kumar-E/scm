/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userInterface.consumerFoodDistribution;

/**
 *
 * @author sathi
 */

import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;

import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;

import userInterface.Business;
import business.organization.procurement.*;
import business.organization.production.*;
import business.organization.onlineShoppingStore.InStockProducts;
import javax.swing.JOptionPane;
import userInterface.LoginJPanel;

public class CullinaryFreightOperatorJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CullinaryFreightOperatorJPanel
     */
    
    private JPanel userProcessContainer;
    private Business business;
    private String username;
    private ProductionAvailableProducts productionAvailableProducts;
    private ProductionOrderDirectory productionOrderDirectory;
    private InStockProducts inStockProducts;
    
    public CullinaryFreightOperatorJPanel(JPanel userProcessContainer, Business business, String username) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.username = username;
        this.business = business;
        this.productionAvailableProducts = this.business.getProductionOrganization().getProductionAvailableProducts();
        this.productionOrderDirectory = this.business.getProductionOrganization().getProductionOrderDirectory();
        this.inStockProducts = this.business.getOnlineShoppingStoreOrganization().getInStockProducts();
        populateTransportationOrderTable();
        populateTransportationOrderAssignedToMeTable();
    }
    
    public void populateTransportationOrderTable() {
        DefaultTableModel model = (DefaultTableModel) tblTransportationOrder.getModel();
        model.setRowCount(0);
        for(ProductionOrder productionOrder : this.productionOrderDirectory.getProductionOrderList()) {
            if(productionOrder.getStatus().equals("Production Completed") && productionOrder.getDriverAssigned().equals("NA")) {
                int productionOrderId = productionOrder.getProductionOrderId();
                String from = "Production Organization";
                String to = "Shopping Store";
                int totalItems = productionOrder.getProductionOrderProducts().values().stream()
                              .mapToInt(Integer::intValue)
                              .sum();
                Object[] row = new Object[] {Integer.valueOf(productionOrderId), from, to, Integer.valueOf(totalItems)};
                model.addRow(row);  
            }
        }
        txtTransportationOrderDetails.setText("");
    }
    
    public void populateTransportationOrderAssignedToMeTable() {
        DefaultTableModel model = (DefaultTableModel) tblTransportationOrderAssignedToMe.getModel();
        model.setRowCount(0);
        for(ProductionOrder productionOrder : this.productionOrderDirectory.getProductionOrderList()) {
            if((productionOrder.getStatus().equals("Transportation Assigned") || productionOrder.getStatus().equals("Delivery Picked")) && productionOrder.getDriverAssigned().equals(this.username)) {
                int productionOrderId = productionOrder.getProductionOrderId();
                String from = "Production Organization";
                String to = "Shopping Store";
                int totalItems = productionOrder.getProductionOrderProducts().values().stream()
                              .mapToInt(Integer::intValue)
                              .sum();
                Object[] row = new Object[] {Integer.valueOf(productionOrderId), from, to, Integer.valueOf(totalItems)};
                model.addRow(row);  
            }
        }
        txtTransporationOrderDetailsAssignedToMe.setText("");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransportationOrder = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTransportationOrderAssignedToMe = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtTransportationOrderDetails = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnAssignToMyQueue = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtTransporationOrderDetailsAssignedToMe = new javax.swing.JTextArea();
        btnRemoveFromMyQueue = new javax.swing.JButton();
        btnDeliveryPicked = new javax.swing.JButton();
        btnDeliveryCompleted = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, 95, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("TRANSPORATION ORDERS");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 84, 513, 30));

        tblTransportationOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Procurement Order ID", "From", "To", "Items"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTransportationOrder);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 126, 520, 234));

        tblTransportationOrderAssignedToMe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Procurement Order ID", "From", "To", "Items"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblTransportationOrderAssignedToMe);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(571, 126, 530, 234));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("TRANSPORTATION ORDERS (ASSIGNED TO ME)");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(551, 89, 452, -1));

        txtTransportationOrderDetails.setColumns(20);
        txtTransportationOrderDetails.setRows(5);
        jScrollPane3.setViewportView(txtTransportationOrderDetails);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, 350, 93));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CUSTOMER FOOD DISTRIBUTION ORGANIZATION");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, 341, 60));

        btnAssignToMyQueue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAssignToMyQueue.setText("ASSIGN TO MY QUEUE");
        btnAssignToMyQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToMyQueueActionPerformed(evt);
            }
        });
        add(btnAssignToMyQueue, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 370, -1, -1));

        txtTransporationOrderDetailsAssignedToMe.setColumns(20);
        txtTransporationOrderDetailsAssignedToMe.setRows(5);
        jScrollPane4.setViewportView(txtTransporationOrderDetailsAssignedToMe);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 370, 340, 93));

        btnRemoveFromMyQueue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRemoveFromMyQueue.setText("REMOVE FROM MY QUEUE");
        btnRemoveFromMyQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFromMyQueueActionPerformed(evt);
            }
        });
        add(btnRemoveFromMyQueue, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 370, 185, -1));

        btnDeliveryPicked.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeliveryPicked.setText("DELIVERY PICKED");
        btnDeliveryPicked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveryPickedActionPerformed(evt);
            }
        });
        add(btnDeliveryPicked, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 400, 185, -1));

        btnDeliveryCompleted.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeliveryCompleted.setText("DELIVERY COMPLETED");
        btnDeliveryCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveryCompletedActionPerformed(evt);
            }
        });
        add(btnDeliveryCompleted, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 430, 185, -1));

        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLogout.setText("LOGOUT");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 40, 95, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.business.getProductionOrganization().setProductionAvailableProducts(this.productionAvailableProducts);
        this.business.getProductionOrganization().setProductionOrderDirectory(this.productionOrderDirectory);
        this.business.getOnlineShoppingStoreOrganization().setInStockProducts(this.inStockProducts);
        LoginJPanel panel = new LoginJPanel(userProcessContainer, this.business);
        userProcessContainer.add("LoginJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed
    
    
    private void btnAssignToMyQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToMyQueueActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblTransportationOrder.getSelectedRow();
        if (selectedRow >= 0) {
            int productionOrderId = (Integer) tblTransportationOrder.getValueAt(selectedRow, 0);
            ProductionOrder selectedOrder = null;
            for (ProductionOrder order : this.productionOrderDirectory.getProductionOrderList()) {
                if (order.getProductionOrderId() == productionOrderId) {
                    selectedOrder = order;
                    break;
                }
            }
            if (selectedOrder != null && selectedOrder.getStatus().equals("Production Completed")) {
                selectedOrder.setStatus("Transportation Assigned");
                selectedOrder.setDriverAssigned(this.username);
                JOptionPane.showMessageDialog(null, "Production order with id = " + selectedOrder.getProductionOrderId() + " has been assigned to your queue");
                populateTransportationOrderTable();
                populateTransportationOrderAssignedToMeTable();
            } else {
                JOptionPane.showMessageDialog(null, "Error: Order not found or not in the correct status for assignment.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select an production order to assign to your queue.");
        }        
    }//GEN-LAST:event_btnAssignToMyQueueActionPerformed

    private void btnRemoveFromMyQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFromMyQueueActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblTransportationOrderAssignedToMe.getSelectedRow();
        if (selectedRow >= 0) {
            int productionOrderId = (Integer) tblTransportationOrderAssignedToMe.getValueAt(selectedRow, 0);
            ProductionOrder selectedOrder = null;
            for (ProductionOrder order : this.productionOrderDirectory.getProductionOrderList()) {
                if (order.getProductionOrderId() == productionOrderId) {
                    selectedOrder = order;
                    break;
                }
            }
            if (selectedOrder != null && selectedOrder.getStatus().equals("Transportation Assigned")) {
                selectedOrder.setStatus("Production Completed");
                selectedOrder.setDriverAssigned("NA");
                selectedOrder.setDeliveryStatus("NA");
                JOptionPane.showMessageDialog(null, "Transportation order with production order id = " + selectedOrder.getProductionOrderId() + " has been removed from your queue");
                populateTransportationOrderTable();
                populateTransportationOrderAssignedToMeTable();
            } else {
                JOptionPane.showMessageDialog(null, "Error: Order not found or not in the correct status for removal.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a transportation order to remove from your queue.");
        }
    }//GEN-LAST:event_btnRemoveFromMyQueueActionPerformed

    private void btnDeliveryPickedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveryPickedActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblTransportationOrderAssignedToMe.getSelectedRow();
        if (selectedRow >= 0) {
            int productionOrderId = (Integer) tblTransportationOrderAssignedToMe.getValueAt(selectedRow, 0);
            ProductionOrder selectedOrder = null;
            for (ProductionOrder order : this.productionOrderDirectory.getProductionOrderList()) {
                if (order.getProductionOrderId() == productionOrderId) {
                    selectedOrder = order;
                    break;
                }
            }
            if (selectedOrder != null && selectedOrder.getStatus().equals("Transportation Assigned")) {
                selectedOrder.setStatus("Delivery Picked");
                JOptionPane.showMessageDialog(null, "Delivery status updated to 'Picked' for order id = " + selectedOrder.getProductionOrderId());
                populateTransportationOrderTable();
                populateTransportationOrderAssignedToMeTable();
            } else {
                JOptionPane.showMessageDialog(null, "Error: Order not found or not in the correct status for updating to 'Delivery Picked'.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a transportation order to update its delivery status.");
        }        
    }//GEN-LAST:event_btnDeliveryPickedActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        this.business.getProductionOrganization().setProductionAvailableProducts(this.productionAvailableProducts);
        this.business.getProductionOrganization().setProductionOrderDirectory(this.productionOrderDirectory);
        this.business.getOnlineShoppingStoreOrganization().setInStockProducts(this.inStockProducts);
        LoginJPanel panel = new LoginJPanel(userProcessContainer, this.business);
        userProcessContainer.add("LoginJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnDeliveryCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveryCompletedActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblTransportationOrderAssignedToMe.getSelectedRow();
        if (selectedRow >= 0) {
            int productionOrderId = (Integer) tblTransportationOrderAssignedToMe.getValueAt(selectedRow, 0);
            ProductionOrder selectedOrder = null;
            for (ProductionOrder order : this.productionOrderDirectory.getProductionOrderList()) {
                if (order.getProductionOrderId() == productionOrderId) {
                    selectedOrder = order;
                    break;
                }
            }
            if (selectedOrder != null && selectedOrder.getStatus().equals("Delivery Picked")) {
                selectedOrder.setStatus("Delivery Completed");
                this.inStockProducts.receiveProductionOrder(selectedOrder);
                JOptionPane.showMessageDialog(null, "Transportation order with production order id = " + selectedOrder.getProductionOrderId() + " has been delivered");
                populateTransportationOrderTable();
                populateTransportationOrderAssignedToMeTable();
            } else {
                JOptionPane.showMessageDialog(null, "Error: Order not found or not in the correct status for marking as 'Delivery Completed'.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a transportation order to mark as delivered.");
        }    
    }//GEN-LAST:event_btnDeliveryCompletedActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignToMyQueue;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeliveryCompleted;
    private javax.swing.JButton btnDeliveryPicked;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRemoveFromMyQueue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tblTransportationOrder;
    private javax.swing.JTable tblTransportationOrderAssignedToMe;
    private javax.swing.JTextArea txtTransporationOrderDetailsAssignedToMe;
    private javax.swing.JTextArea txtTransportationOrderDetails;
    // End of variables declaration//GEN-END:variables
}
